from z3 import *

v1 = [BitVec("v1_%i" % i, 16) for i in range(16)]
v2 = [BitVec("v2_%i" % i, 16) for i in range(16)]

# Create the SMT solver instance and feed it with constraints
s = Solver()
s.add(v1[0] == ord('E'))
s.add(v1[1] == ord('C'))
s.add(v1[2] == ord('W'))
s.add(v1[3] == ord('{'))
s.add(v2[15] == ord('}'))
s.add( [v1[i] <= 128 for i in range(16)] )
s.add( [v2[i] <= 128 for i in range(16)] )
s.add((v2[4] ^ 0x40) * 0xec + (v2[5] ^ 0x40) * (-0x84) + (v1[14] ^ 0x40) * (-0x79) + (v2[6] ^ 0x40) * (-0x1a) + (v2[5] ^ 0x40) * (-0x40) == -0xca9)
s.add((v1[5] ^ 0x6b) * 0xc + (v1[6] ^ 0x6b) * 0x59 + (v1[8] ^ 0x6b) * 0xdc + (v2[1] ^ 0x6b) * (-0x4a) + (v1[15] ^  0x6b) * 0xa2 == 0x5ae1)
s.add((v1[9] ^ 0xf7) * (-0x60) + (v2[14] ^ 0xf7) * (-0xc1) + (v1[5] ^ 0xf7) * (-0xea) + (v1[14] ^ 0xf7) * 199 + (v2[11] ^ 0xf7) * 0xbf == -0x5912)
s.add((v1[12] ^ 0x6e) * 0x25 + (v1[11] ^ 0x6e) * (-0x80) + (v1[5] ^ 0x6e) * 0x88 + (v1[7] ^ 0x6e) * 0x6a == 0x5010)
s.add((v1[4] ^ 0x24) * (-0x7b) + (v2[12] ^ 0x24) * 0xd7 + (v1[12] ^ 0x24) * (-0xfa) + (v1[11] ^ 0x24) * 0xf7 + (v1[13] ^ 0x24) * (-4) == 0x3909)
s.add((v2[0] ^ 0x54) * 0x20 + (v2[8] ^ 0x54) * (-0x86) + (v1[11] ^ 0x54) * (-0x94) + (v1[8] ^ 0x54) * (-0x24) + (v2[10] ^ 0x54) * 0x85 == -0x2439)
s.add((v2[6] ^ 1) * 0x139 + (v2[1] ^ 1) * (-0xd4) + (v1[7] ^ 1) * (-5) + (v1[13] ^ 1) * (-0xa4) == 0x1374)
s.add((v1[15] ^ 0xa7) * (-0xd8) + (v2[3] ^ 0xa7) * 0xd2 + (v1[4] ^ 0xa7) * 0x81 + (v2[11] ^ 0xa7) * (-0xde) == -0x2733)
s.add((v1[11] ^ 0x27) * 0xb9 + (v2[10] ^ 0x27) * (-0xb6) + (v2[5] ^ 0x27) * (-0x36) + (v2[5] ^ 0x27) * 0x4f + (v1[10] ^ 0x27) * 0x8e == 0x3746)
s.add((v2[6] ^ 0x8d) * 0xc6 + (v2[5] ^ 0x8d) * (-0x15) + (v1[11] ^ 0x8d) * 0x26 + (v1[11] ^ 0x8d) * 0x71 + (v2[8] ^ 0x8d) * (-0xb6) == 0x578c)
s.add((v2[2] ^ 200) * (-0x3a) + (v1[13] ^ 200) * (-0x5b) + (v2[11] ^ 200) * (-0xca) + (v2[4] ^ 200) * 0x16e == 0x35e4)
s.add((v2[11] ^ 0x6d) * 0xcc + (v1[13] ^ 0x6d) * (-0x7c) + (v1[5] ^ 0x6d) * (-0x55) + (v2[5] ^ 0x6d) + (v2[5] ^ 0x6d) * 2 + (v2[8] ^ 0x6d) * 0xf6 == 0x3a3a)
s.add((v2[13] ^ 0x66) * (-0xe7) + (v1[6] ^ 0x66) * 0xc4 + (v2[0] ^ 0x66) * 0xf3 + (v2[10] ^ 0x66) * (-0x4b) + (v2[4] ^ 0x66) * (-0x5d) == -0x4997)
s.add((v2[6] ^ 0x1f) * 0xcc + (v2[5] ^ 0x1f) * (-0xfd) + (v2[9] ^ 0x1f) * (-0x6a) + (v1[14] ^ 0x1f) * (-0x3d) + (v1[13] ^ 0x1f) * 0x7d == 0x517)
s.add((v1[15] ^ 0x2b) * (-0xcf) + (v1[13] ^ 0x2b) * 0x93 + (v2[1] ^ 0x2b) * 0x8f + (v1[9] ^ 0x2b) * 0xb2 + (v2[14] ^ 0x2b) * 0x1e == 0x45fd)
s.add((v2[8] ^ 0xd) * (-0x5a) + (v2[14] ^ 0xd) * (-100) + (v2[3] ^ 0xd) * (-0x24) + (v2[5] ^ 0xd) * (-0x6a) == -0x7f12)
s.add((v2[5] ^ 0x1e) * 0xe + (v1[9] ^ 0x1e) * 0x24 + (v1[12] ^ 0x1e) * 0xf6 + (v2[10] ^ 0x1e) * (-0x35) + (v2[7] ^ 0x1e) * (-0x1f) == 0x2b33)
s.add((v1[7] ^ 0x1f) * 0x8a + (v1[8] ^ 0x1f) * 0x71 + (v2[13] ^ 0x1f) * 0x7c + (v2[1] ^ 0x1f) * 6 + (v1[10] ^ 0x1f) * 0x95 == 0x654d)
s.add((v1[6] ^ 0x23) * (-0x49) + (v2[11] ^ 0x23) * (-0x32) + (v2[8] ^ 0x23) * (-0x1a) + (v2[3] ^ 0x23) * 0xe8 + (v1[4] ^ 0x23) * (-0xa6) == -0x17e1)
s.add((v2[12] ^ 0x87) * (-0x46) + (v2[2] ^ 0x87) + (v2[2] ^ 0x87) * 8 + (v2[14] ^ 0x87) * 0xd4 + (v2[7] ^ 0x87) * (-0x7c) + (v2[8] ^ 0x87) * 0x1e == 0x6dce)
s.add((v2[8] ^ 0xe9) * 0x20 + (v2[1] ^ 0xe9) * (-99) + (v2[10] ^ 0xe9) * (-0xae) + (v1[9] ^ 0xe9) * (-0x92) + (v1[8] ^ 0xe9) * 0xd7 == -0x5c96)
s.add((v2[7] ^ 0x3e) * (-0xd8) + (v2[10] ^ 0x3e) * 10 + (v2[3] ^ 0x3e) * (-9) + (v1[11] ^ 0x3e) * (-0x10) + (v1[8] ^ 0x3e) * 0xdc == -0x6ae)
s.add((v2[9] ^ 0xdf) * 0x5f + (v2[11] ^ 0xdf) * 0x43 + (v1[4] ^ 0xdf) * (-0x94) + (v1[11] ^ 0xdf) * 0x50 == 0x5e9c)
s.add((v2[3] ^ 0x6a) * 0x45 + (v1[4] ^ 0x6a) * 0x52 + (v2[1] ^ 0x6a) * (-0xa9) + (v2[7] ^ 0x6a) * 0x6e + (v1[14] ^ 0x6a) * (-0xdb) == -0x280d)
s.add((v2[11] ^ 0x1b) * 0xd7 + (v2[13] ^ 0x1b) * (-0x98) + (v1[11] ^ 0x1b) * 0x20 + (v2[7] ^ 0x1b) * 0x4c + (v1[4] ^ 0x1b) * 0x6e == 0x525e)
s.add((v1[4] ^ 1) * (-0x11) + (v2[7] ^ 1) * (-0x9e) + (v1[7] ^ 1) * (-0x87) + (v2[1] ^ 1) * (-0xcd) + (v2[2] ^ 1) * 0x93 == -0x5132)
s.add((v1[5] ^ 0xd) * 0x2f + (v1[9] ^ 0xd) * 0x51 + (v2[0] ^ 0xd) * (-0xf1) + (v1[8] ^ 0xd) * 0xff + (v2[5] ^ 0xd) * (-0x12) == -0xf85)

# Solve the problem
assert s.check() == sat

# We have a solution !
print('solved')
m = s.model()
f1 = [m.evaluate(v1[i]) for i in range(16)]
f2 = [m.evaluate(v2[i]) for i in range(16)]
flag = ''.join([chr(i.as_long()%128) for i in f1]) + ''.join([chr(i.as_long()%128) for i in f2])
print(flag)

#ECW{l1N34r_C0Nstr41n15_4r3_345y}
